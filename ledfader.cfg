[delayed_gcode LED_FADE_LOOP]
gcode:
    # Read current brightness, direction, LED name, and brightness bounds
    {% set brightness = printer["gcode_macro LED_FADE"].brightness|float %}
    {% set direction = printer["gcode_macro LED_FADE"].direction|int %}
    {% set step = printer["gcode_macro LED_FADE"].step|float %}
    {% set led = printer["gcode_macro LED_FADE"].led %}
    {% set sleep = printer["gcode_macro LED_FADE"].sleep|float %}
    {% set brightness_max = printer["gcode_macro LED_FADE"].brightness_max|float %}
    {% set brightness_min = printer["gcode_macro LED_FADE"].brightness_min|float %}
    
    # Adjust brightness
    {% set brightness = brightness + (step * direction) %}

    # Check bounds and switch direction if necessary
    {% if brightness >= brightness_max %}
        {% set brightness = brightness_max %}
        {% set direction = -1 %}
    {% elif brightness <= brightness_min %}
        {% set brightness = brightness_min %}
        {% set direction = 1 %}
    {% endif %}

    # Update brightness and direction in variables
    SET_GCODE_VARIABLE MACRO=LED_FADE VARIABLE=brightness VALUE={brightness}
    SET_GCODE_VARIABLE MACRO=LED_FADE VARIABLE=direction VALUE={direction}

    # Set LED brightness
    SET_LED LED={led} RED={brightness} GREEN={brightness} BLUE={brightness}

    # Schedule the next execution
    UPDATE_DELAYED_GCODE ID=LED_FADE_LOOP DURATION={sleep}

[gcode_macro LED_FADE]
variable_brightness: 0.0
variable_direction: 1
variable_step: 0.01
variable_sleep: 0.02
variable_led: ""
variable_brightness_max: 1.0
variable_brightness_min: 0.0
gcode:
    # Debug output for initialized variables
    M118 Debug: Values before execution: brightness={printer["gcode_macro LED_FADE"].brightness}, direction={printer["gcode_macro LED_FADE"].direction}, step={printer["gcode_macro LED_FADE"].step}, sleep={printer["gcode_macro LED_FADE"].sleep}, brightness_min={printer["gcode_macro LED_FADE"].brightness_min}, brightness_max={printer["gcode_macro LED_FADE"].brightness_max}, led={printer["gcode_macro LED_FADE"].led}
    {% if not params.LED %}
        M118 Error: LED parameter is required
    {% else %}
        {% if 'BRIGHTNESS' in params %}
            SET_GCODE_VARIABLE MACRO=LED_FADE VARIABLE=brightness VALUE={params.BRIGHTNESS|float}
        {% endif %}
        {% if 'DIRECTION' in params %}
            SET_GCODE_VARIABLE MACRO=LED_FADE VARIABLE=direction VALUE={params.DIRECTION|int}
        {% endif %}
        {% if 'STEP' in params %}
            SET_GCODE_VARIABLE MACRO=LED_FADE VARIABLE=step VALUE={params.STEP|float}
        {% endif %}
        {% if 'SLEEP' in params %}
            SET_GCODE_VARIABLE MACRO=LED_FADE VARIABLE=sleep VALUE={params.SLEEP|float}
        {% endif %}
        {% if 'BRIGHTNESS_MIN' in params %}
            SET_GCODE_VARIABLE MACRO=LED_FADE VARIABLE=brightness_min VALUE={params.BRIGHTNESS_MIN|float}
        {% endif %}
        {% if 'BRIGHTNESS_MAX' in params %}
            SET_GCODE_VARIABLE MACRO=LED_FADE VARIABLE=brightness_max VALUE={params.BRIGHTNESS_MAX|float}
        {% endif %}

        # Set the LED name
        SET_GCODE_VARIABLE MACRO=LED_FADE VARIABLE=led VALUE=\"{params.LED}\"


        # Start the LED fading loop
        UPDATE_DELAYED_GCODE ID=LED_FADE_LOOP DURATION=0.1
        M118 LED fading started for LED {params.LED}
    {% endif %}
    
[gcode_macro LED_FADE_STOP]
gcode:
    {% if not printer["gcode_macro LED_FADE"].led %}
        M117 Error: No active LED to stop
    {% endif %}

    # Stop the LED fading loop
    UPDATE_DELAYED_GCODE ID=LED_FADE_LOOP DURATION=0

    # Reset LED brightness to off
    SET_LED LED={printer["gcode_macro LED_FADE"].led} RED=0.0 GREEN=0.0 BLUE=0.0
    M118 LED fading stopped for LED {printer["gcode_macro LED_FADE"].led}
